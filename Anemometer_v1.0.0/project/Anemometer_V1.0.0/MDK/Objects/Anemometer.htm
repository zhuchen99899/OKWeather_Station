<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Anemometer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Anemometer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Feb 28 10:18:08 2024
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
spi_device_export &rArr; elab_ms1022_register &rArr; elab_ms1022_init &rArr; elab_ms1022_freq_corr_fact &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[11]">DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from drv_spi_bus.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[c]">EXTI0_1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[d]">EXTI2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[e]">EXTI4_15_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[a]">FLASH_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from stm32g0xx_it.o(i.HardFault_Handler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from stm32g0xx_it.o(i.NMI_Handler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[b]">RCC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[9]">RTC_TAMP_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[27]">SPI_DMAError</a> from stm32g0xx_hal_spi.o(i.SPI_DMAError) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[27]">SPI_DMAError</a> from stm32g0xx_hal_spi.o(i.SPI_DMAError) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[27]">SPI_DMAError</a> from stm32g0xx_hal_spi.o(i.SPI_DMAError) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[25]">SPI_DMAHalfReceiveCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[25]">SPI_DMAHalfReceiveCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[2a]">SPI_DMAHalfTransmitCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[28]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[26]">SPI_DMAReceiveCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[26]">SPI_DMAReceiveCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[2b]">SPI_DMATransmitCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[29]">SPI_DMATransmitReceiveCplt</a> from stm32g0xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[5]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from cmsis_os2.o(i.SysTick_Handler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_stm32g0xx.o(i.SystemInit) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[18]">TIM14_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[19]">TIM15_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1a]">TIM16_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1b]">TIM17_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[15]">TIM3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[16]">TIM6_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[17]">TIM7_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[3b]">TimerCallback</a> from cmsis_os2.o(i.TimerCallback) referenced from cmsis_os2.o(i.osTimerNew)
 <LI><a href="#[2c]">UART_DMAAbortOnError</a> from stm32g0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32g0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[31]">UART_RxISR_16BIT</a> from stm32g0xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32g0xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[31]">UART_RxISR_16BIT</a> from stm32g0xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[33]">UART_RxISR_16BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN) referenced from stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[32]">UART_RxISR_8BIT</a> from stm32g0xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32g0xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[32]">UART_RxISR_8BIT</a> from stm32g0xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[34]">UART_RxISR_8BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN) referenced from stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[2f]">UART_TxISR_16BIT</a> from stm32g0xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[2d]">UART_TxISR_16BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(i.UART_TxISR_16BIT_FIFOEN) referenced from stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[30]">UART_TxISR_8BIT</a> from stm32g0xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[2e]">UART_TxISR_8BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(i.UART_TxISR_8BIT_FIFOEN) referenced from stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[20]">USART1_IRQHandler</a> from elab_uart_debug.o(i.USART1_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[8]">WWDG_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[0]">_config</a> from drv_spi_bus.o(i._config) referenced 2 times from drv_spi_bus.o(.data)
 <LI><a href="#[3a]">_entry_start_poll</a> from elab_export.o(i._entry_start_poll) referenced from elab_export.o(i.elab_run)
 <LI><a href="#[46]">_get_status</a> from drv_pin_mcu.o(i._get_status) referenced from drv_pin_mcu.o(.constdata)
 <LI><a href="#[44]">_init</a> from drv_pin_mcu.o(i._init) referenced from drv_pin_mcu.o(.constdata)
 <LI><a href="#[41]">_null_enable</a> from elab_device_null.o(i._null_enable) referenced from elab_device_null.o(.constdata)
 <LI><a href="#[42]">_null_read</a> from elab_device_null.o(i._null_read) referenced from elab_device_null.o(.constdata)
 <LI><a href="#[43]">_null_write</a> from elab_device_null.o(i._null_write) referenced from elab_device_null.o(.constdata)
 <LI><a href="#[45]">_set_mode</a> from drv_pin_mcu.o(i._set_mode) referenced from drv_pin_mcu.o(.constdata)
 <LI><a href="#[47]">_set_status</a> from drv_pin_mcu.o(i._set_status) referenced from drv_pin_mcu.o(.constdata)
 <LI><a href="#[37]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[36]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[38]">_timer_func</a> from elab_anemometer.o(i._timer_func) referenced from elab_anemometer.o(i.elab_anemometer_register)
 <LI><a href="#[39]">_timer_func</a> from elab_led.o(i._timer_func) referenced from elab_led.o(i.elab_led_register)
 <LI><a href="#[1]">_xfer</a> from drv_spi_bus.o(i._xfer) referenced 2 times from drv_spi_bus.o(.data)
 <LI><a href="#[51]">anemometer_export</a> from spi_export.o(i.anemometer_export) referenced from spi_export.o(elab_export)
 <LI><a href="#[4d]">driver_pin_mcu_export</a> from pin_export.o(i.driver_pin_mcu_export) referenced from pin_export.o(elab_export)
 <LI><a href="#[4f]">driver_spi_export</a> from spi_export.o(i.driver_spi_export) referenced from spi_export.o(elab_export)
 <LI><a href="#[3d]">elab_debug_uart_receive</a> from elab_uart_debug.o(i.elab_debug_uart_receive) referenced from shell_export.o(i.shell_uart_init)
 <LI><a href="#[3e]">elab_debug_uart_send</a> from elab_uart_debug.o(i.elab_debug_uart_send) referenced from shell_export.o(i.shell_uart_init)
 <LI><a href="#[62]">fkey_null_func</a> from shell.o(i.fkey_null_func) referenced from shell.o(shellCommand)
 <LI><a href="#[35]">fputc</a> from elab_log.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[64]">get_sysfrq</a> from system_test.o(i.get_sysfrq) referenced from system_test.o(shellCommand)
 <LI><a href="#[63]">get_systemclock_cfg</a> from system_test.o(i.get_systemclock_cfg) referenced from system_test.o(shellCommand)
 <LI><a href="#[4e]">ic_74hc4052d_export</a> from pin_export.o(i.ic_74hc4052d_export) referenced from pin_export.o(elab_export)
 <LI><a href="#[4c]">led_export</a> from led_export.o(i.led_export) referenced from led_export.o(elab_export)
 <LI><a href="#[22]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">module_null_init</a> from elab_export.o(i.module_null_init) referenced from elab_export.o(elab_export)
 <LI><a href="#[48]">module_null_init</a> from elab_export.o(i.module_null_init) referenced from elab_export.o(expoll)
 <LI><a href="#[68]">new_test_func</a> from ms1022_test.o(i.new_test_func) referenced from ms1022_test.o(shellCommand)
 <LI><a href="#[3f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[3c]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[40]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[66]">read_all_ms1022cfg_regs</a> from ms1022_test.o(i.read_all_ms1022cfg_regs) referenced from ms1022_test.o(shellCommand)
 <LI><a href="#[67]">read_ms1022_freq_corr_fact</a> from ms1022_test.o(i.read_ms1022_freq_corr_fact) referenced from ms1022_test.o(shellCommand)
 <LI><a href="#[59]">shellBackspace</a> from shell.o(i.shellBackspace) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[61]">shellClear</a> from shell.o(i.shellClear) referenced from shell.o(shellCommand)
 <LI><a href="#[5e]">shellCmds</a> from shell.o(i.shellCmds) referenced from shell.o(shellCommand)
 <LI><a href="#[5a]">shellDelete</a> from shell.o(i.shellDelete) referenced from shell.o(shellCommand)
 <LI><a href="#[55]">shellDown</a> from shell.o(i.shellDown) referenced from shell.o(shellCommand)
 <LI><a href="#[5b]">shellEnter</a> from shell.o(i.shellEnter) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[5c]">shellHelp</a> from shell.o(i.shellHelp) referenced from shell.o(shellCommand)
 <LI><a href="#[60]">shellKeys</a> from shell.o(i.shellKeys) referenced from shell.o(shellCommand)
 <LI><a href="#[57]">shellLeft</a> from shell.o(i.shellLeft) referenced from shell.o(shellCommand)
 <LI><a href="#[56]">shellRight</a> from shell.o(i.shellRight) referenced from shell.o(shellCommand)
 <LI><a href="#[53]">shellSetVar</a> from shell.o(i.shellSetVar) referenced from shell.o(shellCommand)
 <LI><a href="#[58]">shellTab</a> from shell.o(i.shellTab) referenced from shell.o(shellCommand)
 <LI><a href="#[54]">shellUp</a> from shell.o(i.shellUp) referenced from shell.o(shellCommand)
 <LI><a href="#[5d]">shellUsers</a> from shell.o(i.shellUsers) referenced from shell.o(shellCommand)
 <LI><a href="#[5f]">shellVars</a> from shell.o(i.shellVars) referenced from shell.o(shellCommand)
 <LI><a href="#[52]">shell_poll</a> from shell_export.o(i.shell_poll) referenced from shell_export.o(expoll)
 <LI><a href="#[4b]">shell_uart_init</a> from shell_export.o(i.shell_uart_init) referenced from shell_export.o(elab_export)
 <LI><a href="#[4a]">spi_bus_export</a> from drv_spi_bus.o(i.spi_bus_export) referenced from drv_spi_bus.o(elab_export)
 <LI><a href="#[50]">spi_device_export</a> from spi_export.o(i.spi_device_export) referenced from spi_export.o(elab_export)
 <LI><a href="#[65]">test_ms1022_com</a> from ms1022_test.o(i.test_ms1022_com) referenced from ms1022_test.o(shellCommand)
 <LI><a href="#[49]">uart_null_init</a> from elab_device_null.o(i.uart_null_init) referenced from elab_device_null.o(elab_export)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[1bd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[69]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1be]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1bf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1c2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[1b0]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1b1]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[1b3]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_push
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_pull_pop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_pull
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_pop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToDec
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_clock_config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bus_export
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRemoveParamQuotes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pin_name_valid
</UL>

<P><STRONG><a name="[110]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistoryAdd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPassword
</UL>

<P><STRONG><a name="[127]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
</UL>

<P><STRONG><a name="[1a2]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>

<P><STRONG><a name="[73]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_from_name
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pin_name_valid
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToFloat
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToFloat
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToFloat
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ms1022_freq_corr_fact
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToFloat
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToFloat
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1cb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1cc]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1cd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[82]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[7c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ce]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[88]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[8c]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1d0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_spi_bus.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_DMA_Init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bus_export
</UL>

<P><STRONG><a name="[91]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bus_export
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e8]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_status
</UL>

<P><STRONG><a name="[e9]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_status
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[93]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[94]"></a>HAL_InitTick</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32g0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[95]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_send
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_receive
</UL>

<P><STRONG><a name="[bc]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bus_export
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_send
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_receive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[97]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bus_export
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[99]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g0xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PWREx_ControlVoltageScaling &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_clock_config
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_clock_config
</UL>

<P><STRONG><a name="[12a]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_systemclock_cfg
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sysfrq
</UL>

<P><STRONG><a name="[129]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetOscConfig))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_systemclock_cfg
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sysfrq
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sysfrq
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1434 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_clock_config
</UL>

<P><STRONG><a name="[c5]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[a0]"></a>HAL_SPI_Init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bus_export
</UL>

<P><STRONG><a name="[a1]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xfer
</UL>

<P><STRONG><a name="[a4]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi_bus.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_RxCpltCallback &rArr; elab_spi_bus_xfer_end &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_xfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[c6]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[a3]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xfer
</UL>

<P><STRONG><a name="[a6]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xfer
</UL>

<P><STRONG><a name="[a7]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi_bus.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_TxCpltCallback &rArr; elab_spi_bus_xfer_end &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_xfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[c7]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[a8]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi_bus.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_TxRxCpltCallback &rArr; elab_spi_bus_xfer_end &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_xfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[96]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32g0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b0]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[b4]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[a9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1070 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; elib_queue_pull &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_UART_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UART_MspInit</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, elab_uart_debug.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, elab_uart_debug.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_push
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[c1]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[c2]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, elab_uart_debug.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; elib_queue_pull &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_pull
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_pop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os2.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32g0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b9]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b7]"></a>UART_SetConfig</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[d0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, elab_uart_debug.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; elib_queue_pull &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d2]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d7]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_func_execute
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>

<P><STRONG><a name="[1d3]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d4]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d3]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d5]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
</UL>

<P><STRONG><a name="[1d6]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d7]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d4]"></a>__0vsnprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d8]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1d9]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1da]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[de]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
</UL>

<P><STRONG><a name="[89]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[fb]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_Set_Channel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_write_reg
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1db]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1dc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1dd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d6]"></a>_assert</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, elab_assert.o(i._assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_assert_func
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_toggle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_register
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_register
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_xfer_end
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_register
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_mode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_register
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_get_status
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_edf_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_device
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_poll_export_table
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_stop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_register
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_period
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_calculate_wind_speed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_Set_Channel
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc405d_disable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_switch
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_register
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_test_communication
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_wait_int
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_send_cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_register
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_error_bit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_all_cfgregs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_TOF
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_write_reg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_send_cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_config_all_regs
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_res0
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xfer
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_driver_pin_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_status
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_status
</UL>

<P><STRONG><a name="[db]"></a>_elog_printf</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, elab_log.o(i._elog_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _elog_printf &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_time_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ms1022_com
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ms1022_freq_corr_fact
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_systemclock_cfg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sysfrq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_uart_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_error_bit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_all_cfgregs
</UL>

<P><STRONG><a name="[f2]"></a>bsp_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_init &rArr; _system_clock_config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>check_pin_name_valid</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drv_util.o(i.check_pin_name_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = check_pin_name_valid &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_driver_pin_init
</UL>

<P><STRONG><a name="[f5]"></a>convertToFloat</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, elab_ms1022.o(i.convertToFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = convertToFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_TOF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
</UL>

<P><STRONG><a name="[104]"></a>elab_anemometer_period</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, elab_anemometer.o(i.elab_anemometer_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = elab_anemometer_period &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_test_func
</UL>

<P><STRONG><a name="[f1]"></a>elab_anemometer_register</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, elab_anemometer.o(i.elab_anemometer_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = elab_anemometer_register &rArr; osTimerNew &rArr; xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_valid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anemometer_export
</UL>

<P><STRONG><a name="[10a]"></a>elab_anemometer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, elab_anemometer.o(i.elab_anemometer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = elab_anemometer_stop &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_test_func
</UL>

<P><STRONG><a name="[d8]"></a>elab_assert_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elab_assert.o(i.elab_assert_func))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>

<P><STRONG><a name="[10b]"></a>elab_debug_uart_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, elab_uart_debug.o(i.elab_debug_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = elab_debug_uart_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_uart_init
</UL>

<P><STRONG><a name="[3d]"></a>elab_debug_uart_receive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, elab_uart_debug.o(i.elab_debug_uart_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = elab_debug_uart_receive &rArr; elib_queue_pull_pop &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_pull_pop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_export.o(i.shell_uart_init)
</UL>
<P><STRONG><a name="[3e]"></a>elab_debug_uart_send</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, elab_uart_debug.o(i.elab_debug_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = elab_debug_uart_send &rArr; elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_push
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_pull
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elib_queue_is_empty
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_export.o(i.shell_uart_init)
</UL>
<P><STRONG><a name="[106]"></a>elab_device_find</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, elab_device.o(i.elab_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_edf_mutex
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_register
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_register
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_valid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ms1022_com
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ms1022_freq_corr_fact
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_ms1022cfg_regs
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_test_func
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_register
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_register
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_register
</UL>

<P><STRONG><a name="[109]"></a>elab_device_register</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, elab_device.o(i.elab_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_edf_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_device
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_register
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_register
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_register
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_register
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_null_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_register
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_register
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_register
</UL>

<P><STRONG><a name="[105]"></a>elab_device_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, elab_device.o(i.elab_device_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = elab_device_valid &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_register
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_register
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_register
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_register
</UL>

<P><STRONG><a name="[f7]"></a>elab_driver_pin_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drv_pin_mcu.o(i.elab_driver_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = elab_driver_pin_init &rArr; elab_pin_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_register
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clock_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pin_name_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_pin_mcu_export
</UL>

<P><STRONG><a name="[113]"></a>elab_led_register</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, elab_led.o(i.elab_led_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = elab_led_register &rArr; osTimerNew &rArr; xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_valid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_export
</UL>

<P><STRONG><a name="[114]"></a>elab_led_toggle</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, elab_led.o(i.elab_led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = elab_led_toggle &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_export
</UL>

<P><STRONG><a name="[fe]"></a>elab_ms1022_freq_corr_fact</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, elab_ms1022.o(i.elab_ms1022_freq_corr_fact))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = elab_ms1022_freq_corr_fact &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_get_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToFloat
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_send_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_res0
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ms1022_freq_corr_fact
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_calculate_wind_speed
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>

<P><STRONG><a name="[118]"></a>elab_ms1022_init</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, elab_ms1022.o(i.elab_ms1022_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = elab_ms1022_init &rArr; elab_ms1022_freq_corr_fact &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_test_communication
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_send_cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_config_all_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_register
</UL>

<P><STRONG><a name="[103]"></a>elab_ms1022_read_TOF</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, elab_ms1022.o(i.elab_ms1022_read_TOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = elab_ms1022_read_TOF &rArr; elab_ms1022_read_res0 &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToFloat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_res0
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
</UL>

<P><STRONG><a name="[11b]"></a>elab_ms1022_read_all_cfgregs</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, elab_ms1022.o(i.elab_ms1022_read_all_cfgregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = elab_ms1022_read_all_cfgregs &rArr; _elog_printf &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_ms1022cfg_regs
</UL>

<P><STRONG><a name="[102]"></a>elab_ms1022_read_error_bit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, elab_ms1022.o(i.elab_ms1022_read_error_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = elab_ms1022_read_error_bit &rArr; _elog_printf &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
</UL>

<P><STRONG><a name="[11d]"></a>elab_ms1022_register</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, elab_ms1022.o(i.elab_ms1022_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = elab_ms1022_register &rArr; elab_ms1022_init &rArr; elab_ms1022_freq_corr_fact &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_valid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_device_export
</UL>

<P><STRONG><a name="[100]"></a>elab_ms1022_send_cmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, elab_ms1022.o(i.elab_ms1022_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = elab_ms1022_send_cmd &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
</UL>

<P><STRONG><a name="[101]"></a>elab_ms1022_wait_int</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, elab_ms1022.o(i.elab_ms1022_wait_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = elab_ms1022_wait_int &rArr; elab_pin_get_status &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_get_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
</UL>

<P><STRONG><a name="[116]"></a>elab_pin_get_status</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, elab_pin.o(i.elab_pin_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = elab_pin_get_status &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_wait_int
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
</UL>

<P><STRONG><a name="[112]"></a>elab_pin_register</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, elab_pin.o(i.elab_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = elab_pin_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_driver_pin_init
</UL>

<P><STRONG><a name="[f8]"></a>elab_pin_set_mode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, elab_pin.o(i.elab_pin_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = elab_pin_set_mode &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_register
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_pin_mcu_export
</UL>

<P><STRONG><a name="[ef]"></a>elab_pin_set_status</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, elab_pin.o(i.elab_pin_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = elab_pin_set_status &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_register
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_pin_mcu_export
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc405d_disable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_switch
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>

<P><STRONG><a name="[11e]"></a>elab_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, elab_export.o(i.elab_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = elab_run &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_poll_export_table
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_init_export_table
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>elab_spi_bus_register</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, elab_spi.o(i.elab_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = elab_spi_bus_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bus_export
</UL>

<P><STRONG><a name="[a5]"></a>elab_spi_bus_xfer_end</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, elab_spi.o(i.elab_spi_bus_xfer_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = elab_spi_bus_xfer_end &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
</UL>

<P><STRONG><a name="[f9]"></a>elab_spi_register</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, elab_spi.o(i.elab_spi_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = elab_spi_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_valid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_spi_export
</UL>

<P><STRONG><a name="[126]"></a>elab_spi_send</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, elab_spi.o(i.elab_spi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_write_reg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_send_cmd
</UL>

<P><STRONG><a name="[11c]"></a>elab_spi_xfer</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, elab_spi.o(i.elab_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_test_communication
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_error_bit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_res0
</UL>

<P><STRONG><a name="[dd]"></a>elab_time_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, elab_common.o(i.elab_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = elab_time_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_func_execute
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_poll_export_table
</UL>

<P><STRONG><a name="[10c]"></a>elib_queue_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elib_queue.o(i.elib_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_init
</UL>

<P><STRONG><a name="[10f]"></a>elib_queue_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, elib_queue.o(i.elib_queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_send
</UL>

<P><STRONG><a name="[c3]"></a>elib_queue_pop</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, elib_queue.o(i.elib_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = elib_queue_pop &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[c4]"></a>elib_queue_pull</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, elib_queue.o(i.elib_queue_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = elib_queue_pull &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[10e]"></a>elib_queue_pull_pop</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, elib_queue.o(i.elib_queue_pull_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = elib_queue_pull_pop &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_receive
</UL>

<P><STRONG><a name="[c0]"></a>elib_queue_push</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, elib_queue.o(i.elib_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_send
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[35]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, elab_log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fputc &rArr; elab_debug_uart_send &rArr; elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[e7]"></a>get_pin_from_name</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_util.o(i.get_pin_from_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_pin_from_name &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_status
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_status
</UL>

<P><STRONG><a name="[e6]"></a>get_port_from_name</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_util.o(i.get_port_from_name))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clock_enable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_status
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_status
</UL>

<P><STRONG><a name="[64]"></a>get_sysfrq</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, system_test.o(i.get_sysfrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_sysfrq &rArr; _elog_printf &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_test.o(shellCommand)
</UL>
<P><STRONG><a name="[63]"></a>get_systemclock_cfg</STRONG> (Thumb, 120 bytes, Stack size 104 bytes, system_test.o(i.get_systemclock_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = get_systemclock_cfg &rArr; _elog_printf &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetOscConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_test.o(shellCommand)
</UL>
<P><STRONG><a name="[111]"></a>gpio_clock_enable</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, drv_util.o(i.gpio_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port_from_name
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_driver_pin_init
</UL>

<P><STRONG><a name="[12b]"></a>ic_74hc4052d_register</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, elab_74hc4052d.o(i.ic_74hc4052d_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ic_74hc4052d_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_valid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_export
</UL>

<P><STRONG><a name="[fc]"></a>ic_74hc4052d_switch</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, elab_74hc4052d.o(i.ic_74hc4052d_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ic_74hc4052d_switch &rArr; elab_pin_set_status &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_Set_Channel
</UL>

<P><STRONG><a name="[fd]"></a>ic_74hc405d_disable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, elab_74hc4052d.o(i.ic_74hc405d_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ic_74hc405d_disable &rArr; elab_pin_set_status &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_Set_Channel
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; elab_run &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_run
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[119]"></a>ms1022_test_communication</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, elab_ms1022.o(i.ms1022_test_communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ms1022_test_communication &rArr; ms1022_write_reg &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ms1022_com
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>

<P><STRONG><a name="[68]"></a>new_test_func</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ms1022_test.o(i.new_test_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = new_test_func &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_period
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms1022_test.o(shellCommand)
</UL>
<P><STRONG><a name="[e2]"></a>osDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_entry_start_poll
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>

<P><STRONG><a name="[ee]"></a>osKernelGetTickCount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_toggle
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_func
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_time_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_period
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_func
</UL>

<P><STRONG><a name="[120]"></a>osKernelInitialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_run
</UL>

<P><STRONG><a name="[122]"></a>osKernelStart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_run
</UL>

<P><STRONG><a name="[dc]"></a>osMutexAcquire</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>

<P><STRONG><a name="[da]"></a>osMutexNew</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_register
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_edf_mutex
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_register
</UL>

<P><STRONG><a name="[df]"></a>osMutexRelease</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>

<P><STRONG><a name="[128]"></a>osSemaphoreAcquire</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
</UL>

<P><STRONG><a name="[124]"></a>osSemaphoreNew</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, cmsis_os2.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_register
</UL>

<P><STRONG><a name="[125]"></a>osSemaphoreRelease</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_xfer_end
</UL>

<P><STRONG><a name="[121]"></a>osThreadNew</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_run
</UL>

<P><STRONG><a name="[107]"></a>osTimerNew</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, cmsis_os2.o(i.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = osTimerNew &rArr; xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_register
</UL>

<P><STRONG><a name="[108]"></a>osTimerStart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cmsis_os2.o(i.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_register
</UL>

<P><STRONG><a name="[145]"></a>pvPortMalloc</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1b8]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[cf]"></a>pvTimerGetTimerID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[160]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[66]"></a>read_all_ms1022cfg_regs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ms1022_test.o(i.read_all_ms1022cfg_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = read_all_ms1022cfg_regs &rArr; elab_ms1022_read_all_cfgregs &rArr; _elog_printf &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_all_cfgregs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms1022_test.o(shellCommand)
</UL>
<P><STRONG><a name="[67]"></a>read_ms1022_freq_corr_fact</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ms1022_test.o(i.read_ms1022_freq_corr_fact))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = read_ms1022_freq_corr_fact &rArr; elab_ms1022_freq_corr_fact &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms1022_test.o(shellCommand)
</UL>
<P><STRONG><a name="[59]"></a>shellBackspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell.o(i.shellBackspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellBackspace &rArr; shellDeleteByte &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[190]"></a>shellCheckPermission</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, shell.o(i.shellCheckPermission))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
</UL>

<P><STRONG><a name="[61]"></a>shellClear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, shell.o(i.shellClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellClear &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[178]"></a>shellClearCommandLine</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(i.shellClearCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteCommandLine
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>

<P><STRONG><a name="[5e]"></a>shellCmds</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(i.shellCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellCmds &rArr; shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[5a]"></a>shellDelete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shell.o(i.shellDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellDelete &rArr; shellDeleteByte &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[174]"></a>shellDeleteByte</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, shell.o(i.shellDeleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellDeleteByte &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteCommandLine
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDelete
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellBackspace
</UL>

<P><STRONG><a name="[17a]"></a>shellDeleteCommandLine</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell.o(i.shellDeleteCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
</UL>

<P><STRONG><a name="[55]"></a>shellDown</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shell.o(i.shellDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellDown &rArr; shellHistory &rArr; shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[5b]"></a>shellEnter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(i.shellEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = shellEnter &rArr; shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[17d]"></a>shellExec</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, shell.o(i.shellExec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellParserParam
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistoryAdd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
</UL>

<P><STRONG><a name="[187]"></a>shellExtParsePara</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, shell_ext.o(i.shellExtParsePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseVar
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseString
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseChar
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
</UL>

<P><STRONG><a name="[18c]"></a>shellExtRun</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, shell_ext.o(i.shellExtRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[177]"></a>shellGetCurrent</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, shell.o(i.shellGetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellVars
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUsers
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellKeys
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCmds
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClear
</UL>

<P><STRONG><a name="[18b]"></a>shellGetVarValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell.o(i.shellGetVarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellGetVarValue &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseVar
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
</UL>

<P><STRONG><a name="[18f]"></a>shellHandler</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, shell.o(i.shellHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellHandler &rArr; shellNormalInput &rArr; shellInsertByte &rArr; shellWritePrompt &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellNormalInput
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_poll
</UL>

<P><STRONG><a name="[5c]"></a>shellHelp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, shell.o(i.shellHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = shellHelp &rArr; shellWriteCommandHelp &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListAll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[195]"></a>shellInit</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, shell.o(i.shellInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = shellInit &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellAdd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_uart_init
</UL>

<P><STRONG><a name="[198]"></a>shellInsertByte</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, shell.o(i.shellInsertByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellInsertByte &rArr; shellWritePrompt &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellNormalInput
</UL>

<P><STRONG><a name="[60]"></a>shellKeys</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(i.shellKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellKeys &rArr; shellListKey &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[57]"></a>shellLeft</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell.o(i.shellLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellLeft &rArr; shellWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[192]"></a>shellListAll</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell.o(i.shellListAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellListAll &rArr; shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
</UL>

<P><STRONG><a name="[17b]"></a>shellListCommand</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, shell.o(i.shellListCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListAll
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCmds
</UL>

<P><STRONG><a name="[19a]"></a>shellListItem</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, shell.o(i.shellListItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandDesc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
</UL>

<P><STRONG><a name="[199]"></a>shellListKey</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell.o(i.shellListKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = shellListKey &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellKeys
</UL>

<P><STRONG><a name="[19d]"></a>shellListUser</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell.o(i.shellListUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = shellListUser &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUsers
</UL>

<P><STRONG><a name="[19e]"></a>shellListVar</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell.o(i.shellListVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = shellListVar &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellVars
</UL>

<P><STRONG><a name="[191]"></a>shellNormalInput</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shell.o(i.shellNormalInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellNormalInput &rArr; shellInsertByte &rArr; shellWritePrompt &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
</UL>

<P><STRONG><a name="[56]"></a>shellRight</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(i.shellRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellRight &rArr; shellWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[182]"></a>shellRunCommand</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, shell.o(i.shellRunCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRemoveParamQuotes
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[181]"></a>shellSeekCommand</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, shell.o(i.shellSeekCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseVar
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
</UL>

<P><STRONG><a name="[53]"></a>shellSetVar</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, shell.o(i.shellSetVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = shellSetVar &rArr; shellSetVarValue &rArr; shellShowVar &rArr; shellToDec &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[1a3]"></a>shellSetVarValue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, shell.o(i.shellSetVarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = shellSetVarValue &rArr; shellShowVar &rArr; shellToDec &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCopy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
</UL>

<P><STRONG><a name="[58]"></a>shellTab</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, shell.o(i.shellTab))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = shellTab &rArr; shellListAll &rArr; shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListAll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCopy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCompare
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[1a4]"></a>shellToDec</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, shell.o(i.shellToDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = shellToDec &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
</UL>

<P><STRONG><a name="[18e]"></a>shellToHex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, shell.o(i.shellToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
</UL>

<P><STRONG><a name="[54]"></a>shellUp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell.o(i.shellUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellUp &rArr; shellHistory &rArr; shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[5d]"></a>shellUsers</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(i.shellUsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellUsers &rArr; shellListUser &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[5f]"></a>shellVars</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(i.shellVars))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellVars &rArr; shellListVar &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[176]"></a>shellWriteString</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.shellWriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteCommandLine
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClear
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPassword
</UL>

<P><STRONG><a name="[65]"></a>test_ms1022_com</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ms1022_test.o(i.test_ms1022_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = test_ms1022_com &rArr; ms1022_test_communication &rArr; ms1022_write_reg &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_test_communication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms1022_test.o(shellCommand)
</UL>
<P><STRONG><a name="[14b]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1ac]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1bc]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1af]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[154]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[15f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[14d]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[14c]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[14f]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[151]"></a>vPortExitCritical</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[148]"></a>vPortFree</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1a7]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[152]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[139]"></a>vQueueAddToRegistry</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[13f]"></a>vQueueDelete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[1a8]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[16c]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[130]"></a>vTaskDelay</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1b4]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[171]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1aa]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a9]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1ab]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[134]"></a>vTaskStartScheduler</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[16a]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[6d]"></a>vTaskSwitchContext</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1ae]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ce]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[141]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[140]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[138]"></a>xQueueCreateMutex</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[137]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[13e]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[13d]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[15d]"></a>xQueueGenericReset</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[13b]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1b6]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[142]"></a>xQueueGiveFromISR</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[13a]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[168]"></a>xQueueReceive</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[13c]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[136]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[135]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[1b5]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[144]"></a>xTaskCreate</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[143]"></a>xTaskCreateStatic</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1b7]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[cd]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[132]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[131]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[1b2]"></a>xTaskIncrementTick</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[15a]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1b9]"></a>xTaskPriorityInherit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[170]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[16b]"></a>xTaskResumeAll</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[147]"></a>xTimerCreate</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[146]"></a>xTimerCreateStatic</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, timers.o(i.xTimerCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[1ad]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[149]"></a>xTimerGenericCommand</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>_entry_start_poll</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, elab_export.o(i._entry_start_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _entry_start_poll &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_func_execute
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_func_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elab_export.o(i.elab_run)
</UL>
<P><STRONG><a name="[11f]"></a>_get_init_export_table</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, elab_export.o(i._get_init_export_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_init_export_table
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_run
</UL>

<P><STRONG><a name="[e5]"></a>_get_poll_export_table</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, elab_export.o(i._get_poll_export_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _get_poll_export_table &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_time_ms
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_run
</UL>

<P><STRONG><a name="[e0]"></a>_init_func_execute</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, elab_export.o(i._init_func_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _init_func_execute &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_entry_start_poll
</UL>

<P><STRONG><a name="[e1]"></a>_poll_func_execute</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, elab_export.o(i._poll_func_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _poll_func_execute &rArr; elab_time_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_entry_start_poll
</UL>

<P><STRONG><a name="[48]"></a>module_null_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, elab_export.o(i.module_null_init))
<BR>[Address Reference Count : 2]<UL><LI> elab_export.o(elab_export)
<LI> elab_export.o(expoll)
</UL>
<P><STRONG><a name="[d5]"></a>_add_device</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, elab_device.o(i._add_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _add_device &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
</UL>

<P><STRONG><a name="[d9]"></a>_edf_mutex</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, elab_device.o(i._edf_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_find
</UL>

<P><STRONG><a name="[41]"></a>_null_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, elab_device_null.o(i._null_enable))
<BR>[Address Reference Count : 1]<UL><LI> elab_device_null.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>_null_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, elab_device_null.o(i._null_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _null_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elab_device_null.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>_null_write</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, elab_device_null.o(i._null_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _null_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elab_device_null.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>uart_null_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, elab_device_null.o(i.uart_null_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = uart_null_init &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_device_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elab_device_null.o(elab_export)
</UL>
<P><STRONG><a name="[39]"></a>_timer_func</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, elab_led.o(i._timer_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _timer_func &rArr; elab_pin_set_status &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elab_led.o(i.elab_led_register)
</UL>
<P><STRONG><a name="[62]"></a>fkey_null_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell.o(i.fkey_null_func))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[196]"></a>shellAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, shell.o(i.shellAdd))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
</UL>

<P><STRONG><a name="[175]"></a>shellCheckPassword</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, shell.o(i.shellCheckPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellCheckPassword &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[19b]"></a>shellGetCommandDesc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, shell.o(i.shellGetCommandDesc))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
</UL>

<P><STRONG><a name="[18d]"></a>shellGetCommandName</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, shell.o(i.shellGetCommandName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
</UL>

<P><STRONG><a name="[17c]"></a>shellHistory</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, shell.o(i.shellHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellHistory &rArr; shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCopy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDown
</UL>

<P><STRONG><a name="[17f]"></a>shellHistoryAdd</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, shell.o(i.shellHistoryAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellHistoryAdd &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCopy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[180]"></a>shellParserParam</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, shell.o(i.shellParserParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shellParserParam
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[19f]"></a>shellRemoveParamQuotes</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, shell.o(i.shellRemoveParamQuotes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellRemoveParamQuotes
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[197]"></a>shellSetUser</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, shell.o(i.shellSetUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellSetUser &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
</UL>

<P><STRONG><a name="[1a1]"></a>shellShowVar</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, shell.o(i.shellShowVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = shellShowVar &rArr; shellToDec &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToDec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[1a5]"></a>shellStringCompare</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, shell.o(i.shellStringCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = shellStringCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
</UL>

<P><STRONG><a name="[194]"></a>shellStringCopy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, shell.o(i.shellStringCopy))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistoryAdd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>

<P><STRONG><a name="[179]"></a>shellWriteByte</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, shell.o(i.shellWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRight
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellLeft
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
</UL>

<P><STRONG><a name="[19c]"></a>shellWriteCommandDesc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, shell.o(i.shellWriteCommandDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellWriteCommandDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>

<P><STRONG><a name="[193]"></a>shellWriteCommandHelp</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, shell.o(i.shellWriteCommandHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = shellWriteCommandHelp &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
</UL>

<P><STRONG><a name="[17e]"></a>shellWritePrompt</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, shell.o(i.shellWritePrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellWritePrompt &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
</UL>

<P><STRONG><a name="[1a0]"></a>shellWriteReturnValue</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, shell.o(i.shellWriteReturnValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellWriteReturnValue &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[184]"></a>shellExtNumType</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, shell_ext.o(i.shellExtNumType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shellExtNumType
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[188]"></a>shellExtParseChar</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, shell_ext.o(i.shellExtParseChar))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseString
</UL>

<P><STRONG><a name="[183]"></a>shellExtParseNumber</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, shell_ext.o(i.shellExtParseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = shellExtParseNumber &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtToNum
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtNumType
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[18a]"></a>shellExtParseString</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, shell_ext.o(i.shellExtParseString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellExtParseString
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseChar
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[189]"></a>shellExtParseVar</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, shell_ext.o(i.shellExtParseVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[185]"></a>shellExtToNum</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, shell_ext.o(i.shellExtToNum))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[157]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[159]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ba]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[15b]"></a>prvInitialiseMutex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[15c]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[163]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[164]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[16f]"></a>prvUnlockQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[14a]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[14e]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[155]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[156]"></a>prvDeleteTCB</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[3f]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[15e]"></a>prvInitialiseNewTask</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[150]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1bb]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[153]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[16e]"></a>prvGetNextExpireTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[161]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[162]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[165]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[166]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[169]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[167]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[16d]"></a>prvSwitchTimerLists</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[40]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[172]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[173]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3c]"></a>prvTaskExitError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3b]"></a>TimerCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os2.o(i.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerCallback &rArr; pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2.o(i.osTimerNew)
</UL>
<P><STRONG><a name="[133]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cmsis_os2.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[12f]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[98]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[27]"></a>SPI_DMAError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32g0xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[25]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[2a]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[28]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[26]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_DMAReceiveCplt &rArr; HAL_SPI_RxCpltCallback &rArr; elab_spi_bus_xfer_end &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[2b]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPI_DMATransmitCplt &rArr; HAL_SPI_TxCpltCallback &rArr; elab_spi_bus_xfer_end &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[29]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32g0xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; HAL_SPI_TxRxCpltCallback &rArr; elab_spi_bus_xfer_end &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[c9]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[ca]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[cc]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, stm32g0xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[cb]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, stm32g0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[2c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[aa]"></a>UART_EndRxTransfer</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; elib_queue_pull &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
<LI> stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[33]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 518 bytes, Stack size 48 bytes, stm32g0xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[32]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
<LI> stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[34]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; elib_queue_push &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[2f]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[2d]"></a>UART_TxISR_16BIT_FIFOEN</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.UART_TxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_TxISR_16BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[30]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[2e]"></a>UART_TxISR_8BIT_FIFOEN</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.UART_TxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxISR_8BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[ab]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_8BIT_FIFOEN
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_8BIT
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_16BIT_FIFOEN
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_16BIT
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[ac]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_8BIT_FIFOEN
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_8BIT
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_16BIT_FIFOEN
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR_16BIT
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[8e]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[90]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32g0xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[92]"></a>DMA_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ed]"></a>_error_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i._error_handler))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_clock_config
</UL>

<P><STRONG><a name="[ec]"></a>_system_clock_config</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, bsp.o(i._system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _system_clock_config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_error_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[46]"></a>_get_status</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, drv_pin_mcu.o(i._get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _get_status &rArr; get_pin_from_name &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port_from_name
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_from_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_mcu.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>_init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, drv_pin_mcu.o(i._init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _init &rArr; get_pin_from_name &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port_from_name
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_from_name
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_mcu.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>_set_mode</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, drv_pin_mcu.o(i._set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _set_mode &rArr; get_pin_from_name &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port_from_name
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_from_name
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_mcu.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>_set_status</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_pin_mcu.o(i._set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _set_status &rArr; get_pin_from_name &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port_from_name
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_from_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_mcu.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>_config</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_spi_bus.o(i._config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _config &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi_bus.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>_xfer</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, drv_spi_bus.o(i._xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _xfer &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi_bus.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>spi_bus_export</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, drv_spi_bus.o(i.spi_bus_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = spi_bus_export &rArr; elab_spi_bus_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_bus_register
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi_bus.o(elab_export)
</UL>
<P><STRONG><a name="[12e]"></a>combine_write_reg_buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, elab_ms1022.o(i.combine_write_reg_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = combine_write_reg_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_write_reg
</UL>

<P><STRONG><a name="[117]"></a>elab_ms1022_read_res0</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, elab_ms1022.o(i.elab_ms1022_read_res0))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = elab_ms1022_read_res0 &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_xfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_TOF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
</UL>

<P><STRONG><a name="[11a]"></a>ms1022_config_all_regs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, elab_ms1022.o(i.ms1022_config_all_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ms1022_config_all_regs &rArr; ms1022_write_reg &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_write_reg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_regs_set
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
</UL>

<P><STRONG><a name="[12c]"></a>ms1022_regs_set</STRONG> (Thumb, 784 bytes, Stack size 0 bytes, elab_ms1022.o(i.ms1022_regs_set))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_config_all_regs
</UL>

<P><STRONG><a name="[115]"></a>ms1022_send_cmd</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, elab_ms1022.o(i.ms1022_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_send_cmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
</UL>

<P><STRONG><a name="[12d]"></a>ms1022_write_reg</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, elab_ms1022.o(i.ms1022_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ms1022_write_reg &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_write_reg_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_test_communication
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms1022_config_all_regs
</UL>

<P><STRONG><a name="[38]"></a>_timer_func</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, elab_anemometer.o(i._timer_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _timer_func &rArr; elab_anemometer_calculate_wind_speed &rArr; elab_anemometer_get_TOF &rArr; elab_ms1022_send_cmd &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_calculate_wind_speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elab_anemometer.o(i.elab_anemometer_register)
</UL>
<P><STRONG><a name="[fa]"></a>elab_anemometer_Set_Channel</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, elab_anemometer.o(i.elab_anemometer_Set_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = elab_anemometer_Set_Channel &rArr; ic_74hc405d_disable &rArr; elab_pin_set_status &rArr; _assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc405d_disable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
</UL>

<P><STRONG><a name="[f0]"></a>elab_anemometer_calculate_wind_speed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, elab_anemometer.o(i.elab_anemometer_calculate_wind_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = elab_anemometer_calculate_wind_speed &rArr; elab_anemometer_get_TOF &rArr; elab_ms1022_send_cmd &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_get_TOF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_freq_corr_fact
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_func
</UL>

<P><STRONG><a name="[ff]"></a>elab_anemometer_get_TOF</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, elab_anemometer.o(i.elab_anemometer_get_TOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = elab_anemometer_get_TOF &rArr; elab_ms1022_send_cmd &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_Set_Channel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_wait_int
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_send_cmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_error_bit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_read_TOF
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_calculate_wind_speed
</UL>

<P><STRONG><a name="[52]"></a>shell_poll</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, shell_export.o(i.shell_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = shell_poll &rArr; shellHandler &rArr; shellNormalInput &rArr; shellInsertByte &rArr; shellWritePrompt &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_export.o(expoll)
</UL>
<P><STRONG><a name="[4b]"></a>shell_uart_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, shell_export.o(i.shell_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = shell_uart_init &rArr; _elog_printf &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_elog_printf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_debug_uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_export.o(elab_export)
</UL>
<P><STRONG><a name="[4c]"></a>led_export</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_export.o(i.led_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = led_export &rArr; elab_led_register &rArr; osTimerNew &rArr; xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_toggle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_led_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_export.o(elab_export)
</UL>
<P><STRONG><a name="[4d]"></a>driver_pin_mcu_export</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, pin_export.o(i.driver_pin_mcu_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = driver_pin_mcu_export &rArr; elab_driver_pin_init &rArr; elab_pin_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_pin_set_mode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_driver_pin_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin_export.o(elab_export)
</UL>
<P><STRONG><a name="[4e]"></a>ic_74hc4052d_export</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pin_export.o(i.ic_74hc4052d_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ic_74hc4052d_export &rArr; ic_74hc4052d_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ic_74hc4052d_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin_export.o(elab_export)
</UL>
<P><STRONG><a name="[51]"></a>anemometer_export</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_export.o(i.anemometer_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = anemometer_export &rArr; elab_anemometer_register &rArr; osTimerNew &rArr; xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_anemometer_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_export.o(elab_export)
</UL>
<P><STRONG><a name="[4f]"></a>driver_spi_export</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, spi_export.o(i.driver_spi_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = driver_spi_export &rArr; elab_spi_register &rArr; elab_device_register &rArr; elab_device_find &rArr; _edf_mutex &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_spi_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_export.o(elab_export)
</UL>
<P><STRONG><a name="[50]"></a>spi_device_export</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_export.o(i.spi_device_export))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = spi_device_export &rArr; elab_ms1022_register &rArr; elab_ms1022_init &rArr; elab_ms1022_freq_corr_fact &rArr; ms1022_send_cmd &rArr; elab_spi_send &rArr; elab_spi_xfer &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elab_ms1022_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_export.o(elab_export)
</UL>
<P><STRONG><a name="[e3]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d2]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[eb]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ea]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[37]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[36]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
